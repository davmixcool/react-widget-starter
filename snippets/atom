# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson


'.source.js':
  'React Component':
    'prefix': 'rc'
    'body': """
        import React, { Component, PropTypes  } from 'react';
        import CSSModules from 'react-css-modules';
        import { connect } from 'react-redux';

        import Sass from '../sass/style.scss';

        @connect((store)=>{
          return {
            store:store
          }
        }
        )
        @CSSModules(Sass,{allowMultiple:true})
        export default class ${1:Widget} extends Component {



          //###################### METHODS
            handleSubmit = (e) => {
              e.preventDefault()

            }

          //###################### RENDER

          render() {
            const {
              title
            } = this.props;

            return <div styleName="section">
                      <div styleName="container">{this.props.children}</div>
                  </div>
          }


        }



        """

  'React Prop Types':
    'prefix': 'rpt'
    'body': """
  let propTypes = {
// You can declare that a prop is a specific JS primitive. By default, these
// are all optional.
optionalArray: React.PropTypes.array,
optionalBool: React.PropTypes.bool,
optionalFunc: React.PropTypes.func,
optionalNumber: React.PropTypes.number,
optionalObject: React.PropTypes.object,
optionalString: React.PropTypes.string,
optionalSymbol: React.PropTypes.symbol,

// Anything that can be rendered: numbers, strings, elements or an array
// (or fragment) containing these types.
optionalNode: React.PropTypes.node,

// A React element.
optionalElement: React.PropTypes.element,

// You can also declare that a prop is an instance of a class. This uses
// JS's instanceof operator.
optionalMessage: React.PropTypes.instanceOf(Message),

// You can ensure that your prop is limited to specific values by treating
// it as an enum.
optionalEnum: React.PropTypes.oneOf(['News', 'Photos']),

// An object that could be one of many types
optionalUnion: React.PropTypes.oneOfType([
  React.PropTypes.string,
  React.PropTypes.number,
  React.PropTypes.instanceOf(Message)
]),

// An array of a certain type
optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),

// An object with property values of a certain type
optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),

// An object taking on a particular shape
optionalObjectWithShape: React.PropTypes.shape({
  color: React.PropTypes.string,
  fontSize: React.PropTypes.number
}),

// You can chain any of the above with `isRequired` to make sure a warning
// is shown if the prop isn't provided.
requiredFunc: React.PropTypes.func.isRequired,

// A value of any data type
requiredAny: React.PropTypes.any.isRequired,

// You can also specify a custom validator. It should return an Error
// object if the validation fails. Don't `console.warn` or throw, as this
// won't work inside `oneOfType`.
customProp: function(props, propName, componentName) {
  if (!/matchme/.test(props[propName])) {
    return new Error(
      'Invalid prop `' + propName + '` supplied to' +
      ' `' + componentName + '`. Validation failed.'
    );
  }
},

// You can also supply a custom validator to `arrayOf` and `objectOf`.
// It should return an Error object if the validation fails. The validator
// will be called for each key in the array or object. The first two
// arguments of the validator are the array or object itself, and the
// current item's key.
customArrayProp: React.PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {
  if (!/matchme/.test(propValue[key])) {
    return new Error(
      'Invalid prop `' + propFullName + '` supplied to' +
      ' `' + componentName + '`. Validation failed.'
    );
  }
})
};
        """
  'React Redux Tunk Init':
    'prefix': 'rrt'
    'body': """
        import { createStore, applyMiddleware } from 'redux';
        import createLogger from 'redux-logger';
        import {$1:Reducer} from './redux/reducers';

        const thunk = (store) => (next) => (action) =>
          typeof action === 'function' ?
            action(store.dispatch) :
            next(action);

        const configureStore() => {
          const middlewares = [thunk];
          middlewares.push(createLogger());
        }

        """

  'React Native Component':
    'prefix': 'rnc'
    'body': """
        import React, { Component} from 'react'
        import {  ListView, StatusBar, StyleSheet, TextInput, Text, View,  } from 'react-native';



        export default class ${1:ReactNativeComponent} extends Component {
          render() {
            return <View style={ styles.container } >

                      <StatusBar barStyle="light-content" />
                      <TextInput style={ styles.searchBox} />


                    </View>
          }
        }

        const styles = StyleSheet.create({
            container: {
              flex: 1,
              justifyContent: 'center',
              alignItems: 'center',
              backgroundColor: '#F5FCFF',
            },
            searchBox: {
              height:40,
              bordercolor: clrs.black,
              borderWidth: 2,
              margin: 16,
              paddingLeft: 10,
            }

          });

        """


  'React Router':
    'prefix':'rroute'
    'body':"""
    <Router>
        <div>
          <ul>
            <li><Link to="/">Home</Link></li>
            <li><Link to="/about">About</Link></li>
            <li><Link to="/topics">Topics</Link></li>
          </ul>

          <hr/>

          <Match exactly pattern="/" component={EventTransactionReport} />
          <Match pattern="/about" component={EventTransactionReport} />
          <Match pattern="/topics" component={WidgetTemplate} />
        </div>
      </Router>
      """
  'log array length':
    'prefix': 'llen'
    'body': 'console.log(\'${1:array} length\', ${1:array}.length);$2'
  'React Render':
    'prefix':'rrend'
    'body':"""
    ReactDOM.render(<${1:ComponentName}>Hello World!</${1:ComponentName}>, document.getElementById("${2:Dom Target}"));
    """
  'Array Map':
    'prefix':'map'
    'body':"""
    ${1:array}.map(function(obj) {
      ${3:code}
    });
    """

  'React Story':
    'prefix':'rs'
    'body':"""
    import React from 'react';
    import { storiesOf, action, linkTo } from '@kadira/storybook';
    import ${1:WidgetTemplate} from '../${1:WidgetTemplate}';

    storiesOf('${1:WidgetTemplate}', module)
      .add('Danger Notice', () => (
        <${1:WidgetTemplate} >
                <div styleName="notification is-danger">
                    <button onClick={action('delete clicked!')} styleName="delete"></button>
                    Danger lorem ipsum dolor sit amet, consectetur
                    adipiscing elit lorem ipsum dolor sit amet,
                    consectetur adipiscing elit
                </div>

      </${1:WidgetTemplate}>
      ))
      .add('Box', () => (
        <${1:WidgetTemplate} >
          <div styleName="box">lorem ipsum dolor sit amet, consectetur
        adipiscing elit lorem ipsum dolor sit amet,
        consectetur adipiscing elit
        </div>

          </${1:WidgetTemplate}>
      )).add('Buttons', () => (
          <${1:WidgetTemplate} >
            <a styleName="button">Button</a>
            <a styleName="button is-primary">Primary</a>
            <a styleName="button is-info">Info</a>
            <a styleName="button is-success">Success</a>
            <a styleName="button is-warning">Warning</a>
            <a styleName="button is-danger">Danger</a>
            <a styleName="button is-link">Link</a>

            </${1:WidgetTemplate}>
        )).add('Progress', () => (
            <${1:WidgetTemplate} >
              <progress styleName="progress" value="15" max="100">15%</progress>
              <progress styleName="progress is-primary" value="30" max="100">30%</progress>
              <progress styleName="progress is-info" value="45" max="100">45%</progress>
              <progress styleName="progress is-success" value="60" max="100">60%</progress>
              <progress styleName="progress is-warning" value="75" max="100">75%</progress>
              <progress styleName="progress is-danger" value="90" max="100">90%</progress>

              </${1:WidgetTemplate}>
          ))
        ;

    """
